# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up JDK 21
      uses: actions/setup-java@v3
      with:
        java-version: '21'
        distribution: 'temurin'
        
    - name: Grant execute permission for gradlew + build
      run: | 
        pwd
        cd ..
        pwd
        chmod +x gradlew
        ./gradlew build
      working-directory: bowl-mates-backend/target/

    # Above: Gradle runner, functioning -- runs on push and pull-request
    # Below: To be added in when Dan figures out some additional details
      
    # - name: Install Utilities
    #   run: |
    #       sudo apt-get update
    #       sudo apt-get install -y jq unzip

    # - name: Install AWS Client
    #   run: |
    #     curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
    #     unzip awscliv2.zip
    #     sudo ./aws/install || true
    #     aws --version
    #     curl "https://s3.us-west-2.amazonaws.com/lightsailctl/latest/linux-amd64/lightsailctl" -o "lightsailctl"
    #     sudo mv "lightsailctl" "/usr/local/bin/lightsailctl"
    #     sudo chmod +x /usr/local/bin/lightsailctl

    # - name: Configure AWS credentials
    #   uses: aws-actions/configure-aws-credentials@v1
    #   with:
    #     aws-region: ${{ env.AWS_REGION }}
    #     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
    #     aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    # - name: Build Docker Image
    #   run: docker build -t ${{ env.AWS_LIGHTSAIL_SERVICE_NAME }}:release .

    # - name: Push and Deploy
    #   run: |
    #     service_name=${{ env.AWS_LIGHTSAIL_SERVICE_NAME }}
    #     aws lightsail push-container-image \
    #       --region ${{ env.AWS_REGION }} \
    #       --service-name ${service_name} \
    #       --label ${service_name} \
    #       --image ${service_name}:release
    #     aws lightsail get-container-images --service-name ${service_name} | jq --raw-output ".containerImages[0].image" > image.txt
    #     jq --arg image $(cat image.txt) '.containers.app.image = $image' container.template.json > container.json
    #     aws lightsail create-container-service-deployment --service-name ${service_name} --cli-input-json file://$(pwd)/container.json

   
