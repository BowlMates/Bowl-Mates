package me.bowlmates.bowlmatesbackend.Controllers;

import me.bowlmates.bowlmatesbackend.Repositories.RestRepo;
import me.bowlmates.bowlmatesbackend.Models.TestRestaurant;
import me.bowlmates.bowlmatesbackend.Repositories.UserRepo;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.*;

import java.util.HashMap;
import java.util.Map;

@RestController // This means that this class is a Controller
@RequestMapping(path="/admin")
@CrossOrigin("*")
public class AdminController {

    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepo userRepository;
    @Autowired
    private RestRepo restaurantRepository;

//    @GetMapping("/")
//    public String test() {
//        return "admin level";
//    }

    @GetMapping(value = "/test", produces = "application/json")
    public Map<String, String> test() {
        Map<String, String> response = new HashMap<>();
        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
        String currentPrincipalName = authentication.getName();
//        response.put("message", "Admin Test succeeded!");
        response.put("message", currentPrincipalName);
        return response;
    }

    @GetMapping("/restaurant")
    public String showRestaurantForm(Model model){
        // create model object to store form data
        TestRestaurant rest = new TestRestaurant();
        model.addAttribute("rest", rest);
        return "restaurant";
    }

    @PostMapping("/restaurant/save")
    public String restaurant_info( @ModelAttribute("rest") TestRestaurant restData,
                                   BindingResult result,
                                   Model model){
        TestRestaurant existingTestRestaurant = restaurantRepository.findByAddress(restData.getAddress());

        if(existingTestRestaurant != null && existingTestRestaurant.getAddress() != null && !existingTestRestaurant.getAddress().isEmpty()){
            result.rejectValue("address", null,
                    "Your restaurant is already registered with BowlMates!");
        }

        if(result.hasErrors()){
            model.addAttribute("rest", restData);
            return "/restaurant";
        }

        restaurantRepository.save(restData);
        return "redirect:/restaurant?success";
    }

}
