package me.bowlmates.bowlmatesbackend.Controllers;

import me.bowlmates.bowlmatesbackend.Models.*;
import me.bowlmates.bowlmatesbackend.Repositories.AvailRepo;
import me.bowlmates.bowlmatesbackend.Repositories.RestRepo;
import me.bowlmates.bowlmatesbackend.Services.AvailabilityService;
import me.bowlmates.bowlmatesbackend.Services.MatchingAlgorithm;
import me.bowlmates.bowlmatesbackend.Services.RestaurantService;
import me.bowlmates.bowlmatesbackend.Repositories.UserRepo;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler;
import org.springframework.web.bind.annotation.*;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

/**
 * REST Controller for user requests
 */
@RestController // This means that this class is a Controller
@RequestMapping(path="/user") // This means URL's start with /demo (after Application path)
public class UserController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepo userRepository;
    @Autowired
    private RestRepo restaurantRepository;
    @Autowired
    private AvailRepo availabilityRepository;
    @Autowired
    private RestaurantService restaurantService;
    @Autowired
    private AvailabilityService availabilityService;

    @Autowired
    private MatchingAlgorithm matchingAlgorithm;

    /**
     * Landing page for user
     *
     * @return a Map with message signifying user level
     */
    @GetMapping(value = "/", produces = "application/json")
    public Map<String, String> user() {
        Map<String, String> response = new HashMap<>();
        response.put("message", "user level");
        return response;
    }

    /**
     * Adds restaurant to user's favorites
     *
     * @param body RestaurantDTO restaurant object returned from the front end
     */
    @PostMapping("/prefs/save")
    public void setRestPreferences(@RequestBody RestaurantDTO body) {
        restaurantService.addPreference(body);
    }

    /**
     * Provides set of user's favorite restaurants
     *
     * @return Set of RestaurantDTO objects tied to user
     */
    @GetMapping(value = "/prefs", produces = "application/json")
    public Set<RestaurantDTO> getRestPreferences() {
        String username = "";
        Authentication auth = SecurityContextHolder
                .getContext()
                .getAuthentication();
        if(auth != null && auth.isAuthenticated()){
            username = auth.getName();
        }
        TestUser user = userRepository.findByUsername(username);
        Set<RestaurantDTO> names = new HashSet<>();
        Set<TestRestaurant> rests = user.getFavoriteRestaurants();
        for (TestRestaurant rest : rests) {
            names.add(new RestaurantDTO(rest));
        }
        return names;
    }

    /**
     * Gets all restaurants
     *
     * @return a Set of RestaurantDTO objects representing all restaurants
     */
    @GetMapping(value = "/rests", produces = "application/json")
    public Set<RestaurantDTO> getAllRestaurants() {
        List<TestRestaurant> allRests = restaurantRepository.findAll();
        Set<RestaurantDTO> setRests = new HashSet<>();
        for(TestRestaurant restaurant : allRests){
            setRests.add(new RestaurantDTO(restaurant));
        }
        return setRests;
    }

    /**
     * Provides frontend with user availability
     *
     * @return a List of AvailabilityDTO objects representing times user is available
     */
    @GetMapping(value = "/avail", produces = "application/json")
    public List<AvailabilityDTO> getAvailability() {
        String username = "";
        Authentication auth = SecurityContextHolder
                .getContext()
                .getAuthentication();
        if (auth != null && auth.isAuthenticated()) {
            username = auth.getName();
        }
        TestUser user = userRepository.findByUsername(username);
        Set<TestAvailability> availabilities = user.getAvailability();
        List<AvailabilityDTO> aDTO = new ArrayList<>();
        for (TestAvailability avail : availabilities) {
            aDTO.add(new AvailabilityDTO(avail.getDay(), avail.getHour()));
        }
        return aDTO;
    }

    /**
     * Updates user availability from frontend
     *
     * @param availabilityDTOList List of AvailabilityDTO representing user availability
     */
    @PostMapping("/avail/save")
    public void setAvailability(@RequestBody List<AvailabilityDTO> availabilityDTOList) {
        availabilityService.addAvail(availabilityDTOList);
    }


    // TODO: Matching documentation
    @GetMapping("/match")
    public void runMatches() {
        matchingAlgorithm.QueueUp();
    }

    @GetMapping(value = "/match/show", produces = "application/json")
    public List<Integer> showMatches() {
        return matchingAlgorithm.showQueue();
    }

    // TODO: Profile documentation
    @GetMapping("/profile")
    public ProfileDTO getProfile() {
        String username = "";
        Authentication auth = SecurityContextHolder
                .getContext()
                .getAuthentication();
        if (auth != null && auth.isAuthenticated()) {
            username = auth.getName();
        }
        TestUser user = userRepository.findByUsername(username);
        TestProfile profile = user.getProfile();
        return profile.getDTO();
    }

    @PostMapping("/profile/save")
    public void setProfile(@RequestBody ProfileDTO profileDTO) {
        String username = "";
        Authentication auth = SecurityContextHolder
                .getContext()
                .getAuthentication();
        if (auth != null && auth.isAuthenticated()) {
            username = auth.getName();
        }
        TestUser user = userRepository.findByUsername(username);
        TestProfile profile = user.getProfile();
        profile.setName(profileDTO.getName());
        profile.setPronouns(profileDTO.getPronouns());
        profile.setBio(profileDTO.getBio());
    }

    /**
     * Function for integration testing
     *
     * @return Map of String with message
     */
    @GetMapping(value = "/test", produces = "application/json")
    public Map<String, String> test() {
        Map<String, String> response = new HashMap<>();
        response.put("message", "Test succeeded!");
        return response;
    }

    @PostMapping(value = "/image/save")
    public Boolean setImage(@RequestBody String body) {
        // TODO: implement
        return true;
    }

    SecurityContextLogoutHandler logoutHandler = new SecurityContextLogoutHandler();

}
