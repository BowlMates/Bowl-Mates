package me.bowlmates.bowlmatesbackend.Controllers;

import me.bowlmates.bowlmatesbackend.DataTransferObjects.*;
import me.bowlmates.bowlmatesbackend.Models.*;
import me.bowlmates.bowlmatesbackend.Services.*;
import me.bowlmates.bowlmatesbackend.Repositories.UserRepo;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import java.io.File;
import java.util.*;

/**
 * REST Controller for user requests
 */
@RestController // This means that this class is a Controller
@RequestMapping(path="/user") // This means URL's start with /user (after Application path)
public class UserController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepo userRepository;
    @Autowired
    private ProfileService profileService;

    @Value("${upload.directory}") // Get relative path to uploads directory from application.properties
    private String uploadDirectory;

    /**
     * Landing page for user
     *
     * @return a Map with message signifying user level
     */
    @GetMapping(value = "/", produces = "application/json")
    public Map<String, String> user() {
        Map<String, String> response = new HashMap<>();
        response.put("message", "user level");
        return response;
    }

    /**
     * Provides frontend with user profile info
     *
     * @return Profile Data Transfer Object
     * @throws Exception When unable to authenticate user
     */
    @GetMapping("/profile")
    public ProfileDTO getProfile() throws Exception {
        return profileService.getProfile().getDTO();
    }

    /**
     * Updates user profile info from frontend
     *
     * @param profileDTO Data Transfer Object with profile info
     * @throws Exception when user fails to authenticate
     */
    @PostMapping("/profile/save")
    public void setProfile(@RequestBody ProfileDTO profileDTO) throws Exception {
        String username = "";
        List<Integer> list = new ArrayList<>();
        Authentication auth = SecurityContextHolder.getContext().getAuthentication();
        if (auth != null && auth.isAuthenticated()) {
            username = auth.getName();
        }
        User user = userRepository.findByUsername(username);
        Profile profile = user.getProfile();
        profileDTO.setPhoto(profile.getPhoto());
        profileService.updateProfile(profileDTO);
    }

    /**
     * Gets another user's profile based on their user id
     *
     * @param userId the user id of the other user
     * @return the user's Profile
     * @throws Exception When profile does not exist
     */
    @PostMapping("/profile/other")
    public ProfileDTO getOtherProfile(@RequestBody Integer userId) throws Exception {
        User other = userRepository.findById(userId).get();
        Profile profile = other.getProfile();
        return profile.getDTO();
    }

    /**
     * Provides frontend mapping to profile photo
     *
     * @return String with mapping to profile photo
     * @throws Exception when user fails to authenticate
     */
    @GetMapping(value = "/photo", produces = "application/json")
    public String getPhoto() throws Exception {
        return profileService.getProfile().getPhoto();
    }

    /**
     * Updates user profile photo from frontend
     *
     * @param photo image file to set profile pic to
     * @return Status message
     * @throws Exception when user fails to authenticate
     */
    @PostMapping("/photo/save")
    public ResponseEntity<String> setPhoto(@RequestParam("image") MultipartFile photo)  throws Exception {

        // Validate file
        if (photo.isEmpty()) {
            throw new Exception();
        }

        // Save the file on the server
        try {
            // Construct the full path to the upload directory
            String fullPath = System.getProperty("user.dir") + File.separator + uploadDirectory;
            String filePath = fullPath + File.separator + photo.getOriginalFilename();
            File dest = new File(filePath);

            // Create the directory if it doesn't exist
            dest.getParentFile().mkdirs();

            photo.transferTo(dest);

            ProfileDTO userProfile = profileService.getProfile().getDTO();
            userProfile.setPhoto(photo.getOriginalFilename());

            profileService.updateProfile(userProfile);

            return ResponseEntity.ok("File uploaded successfully!");
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return ResponseEntity.status(500).body("Failed to upload the file");
        }
    }

    /**
     * Function for integration testing
     *
     * @return Map of String with message
     */
    @GetMapping(value = "/test", produces = "application/json")
    public Map<String, String> test() {
        Map<String, String> response = new HashMap<>();
        response.put("message", "Test succeeded!");
        return response;
    }

    SecurityContextLogoutHandler logoutHandler = new SecurityContextLogoutHandler();

}
