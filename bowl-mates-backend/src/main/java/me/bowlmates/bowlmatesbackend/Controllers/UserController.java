package me.bowlmates.bowlmatesbackend.Controllers;

import jakarta.persistence.criteria.CriteriaBuilder;
import me.bowlmates.bowlmatesbackend.Models.*;
import me.bowlmates.bowlmatesbackend.Repositories.AvailRepo;
import me.bowlmates.bowlmatesbackend.Repositories.RestRepo;
import me.bowlmates.bowlmatesbackend.Services.*;
import me.bowlmates.bowlmatesbackend.Repositories.UserRepo;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import java.io.File;
import java.util.*;

/**
 * REST Controller for user requests
 */
@RestController // This means that this class is a Controller
@RequestMapping(path="/user") // This means URL's start with /user (after Application path)
public class UserController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepo userRepository;
    @Autowired
    private RestRepo restaurantRepository;
    @Autowired
    private RestaurantService restaurantService;
    @Autowired
    private AvailabilityService availabilityService;
    @Autowired
    private ProfileService profileService;
    @Autowired
    private MessageService messageService;

    @Autowired
    private MatchingAlgorithm matchingAlgorithm;

    @Value("${upload.directory}") // Get relative path to uploads directory from application.properties
    private String uploadDirectory;

    /**
     * Landing page for user
     *
     * @return a Map with message signifying user level
     */
    @GetMapping(value = "/", produces = "application/json")
    public Map<String, String> user() {
        Map<String, String> response = new HashMap<>();
        response.put("message", "user level");
        return response;
    }

    /**
     * Adds restaurants to user's favorites
     *
     * @param body RestaurantDTO list of favorite restaurants
     */
    @PostMapping("/prefs/save")
    public void setRestPreferences(@RequestBody RestaurantDTO body) {
        restaurantService.addPreference(body);
    }

    /**
     * Provides set of user's favorite restaurants
     *
     * @return Set of RestaurantDTO objects tied to user
     */
    @GetMapping(value = "/prefs", produces = "application/json")
    public Set<RestaurantDTO> getRestPreferences() {
        String username = "";
        Authentication auth = SecurityContextHolder
                .getContext()
                .getAuthentication();
        if(auth != null && auth.isAuthenticated()){
            username = auth.getName();
        }
        TestUser user = userRepository.findByUsername(username);
        Set<RestaurantDTO> names = new HashSet<>();
        Set<TestRestaurant> rests = user.getFavoriteRestaurants();
        for (TestRestaurant rest : rests) {
            names.add(new RestaurantDTO(rest));
        }
        return names;
    }

    /**
     * Gets all restaurants
     *
     * @return a Set of RestaurantDTO objects representing all restaurants
     */
    @GetMapping(value = "/rests", produces = "application/json")
    public Set<RestaurantDTO> getAllRestaurants() {
        List<TestRestaurant> allRests = restaurantRepository.findAll();
        Set<RestaurantDTO> setRests = new HashSet<>();
        for(TestRestaurant restaurant : allRests){
            setRests.add(new RestaurantDTO(restaurant));
        }
        return setRests;
    }

    /**
     * Provides frontend with user availability
     *
     * @return a List of AvailabilityDTO objects representing times user is available
     */
    @GetMapping(value = "/avail", produces = "application/json")
    public List<AvailabilityDTO> getAvailability() {
        String username = "";
        Authentication auth = SecurityContextHolder
                .getContext()
                .getAuthentication();
        if (auth != null && auth.isAuthenticated()) {
            username = auth.getName();
        }
        TestUser user = userRepository.findByUsername(username);
        Set<TestAvailability> availabilities = user.getAvailability();
        List<AvailabilityDTO> aDTO = new ArrayList<>();
        for (TestAvailability avail : availabilities) {
            aDTO.add(new AvailabilityDTO(avail.getDay(), avail.getHour()));
        }
        return aDTO;
    }

    /**
     * Updates user availability from frontend
     *
     * @param availabilityDTOList List of AvailabilityDTO representing user availability
     */
    @PostMapping("/avail/save")
    public void setAvailability(@RequestBody List<AvailabilityDTO> availabilityDTOList) {
        availabilityService.addAvail(availabilityDTOList);
    }

    /**
     * updates the users matching queue
     */
    @GetMapping("/match")
    public void runMatches() {
        matchingAlgorithm.QueueUp();
    }

    /**
     * returns a list of the users potential matches based on their ranking
     * from the matching algorithm
     *
     * @return an ordered list of integers representing user ids (ordered by matching potential)
     */
    @GetMapping(value = "/match/show", produces = "application/json")
    public List<Integer> showMatches() {
        return matchingAlgorithm.showQueue();
    }

    /**
     * used when a user approves another user
     *
     * @param userId the other user to be approved
     * @return an updated list of the matching queue minus the most recent approved user
     */
    @PostMapping("/match/approve")
    public List<Integer> approve(@RequestBody Integer userId) {
        return matchingAlgorithm.approve(userId);
    }

    /**
     * used when a user rejects another user
     *
     * @param userId the other user to be rejected
     * @return an updated list of the matching queue minus the most recent rejected user
     */
    @PostMapping("/match/reject")
    public List<Integer> reject(@RequestBody Integer userId) {
        return matchingAlgorithm.deny(userId);
    }

    /**
     * Used when a user wants a match removed from their matches
     *
     * @param userId id of user to unmatch
     */
    @PostMapping("/unmatch")
    public void unmatch(@RequestBody Integer userId) {
        matchingAlgorithm.unmatch(userId);
    }

    /**
     * Provides frontend with user profile info
     *
     * @return Profile Data Transfer Object
     * @throws Exception When unable to authenticate user
     */
    @GetMapping("/profile")
    public ProfileDTO getProfile() throws Exception {
        return profileService.getProfile().getDTO();
    }

    /**
     * Updates user profile info from frontend
     *
     * @param profileDTO Data Transfer Object with profile info
     * @throws Exception when user fails to authenticate
     */
    @PostMapping("/profile/save")
    public void setProfile(@RequestBody ProfileDTO profileDTO) throws Exception {
        profileService.updateProfile(profileDTO);
    }

    /**
     * Provides frontend mapping to profile photo
     *
     * @return String with mapping to profile photo
     * @throws Exception when user fails to authenticate
     */
    @PostMapping("/profile/other")
    public ProfileDTO getOtherProfile(@RequestBody Integer userId) throws Exception {
        TestUser other = userRepository.findById(userId).get();
        TestProfile profile = other.getProfile();
        return profile.getDTO();
    }

    @GetMapping(value = "/photo", produces = "application/json")
    public String getPhoto() throws Exception {
        return profileService.getProfile().getPhoto();
    }

    /**
     * Updates user profile photo from frontend
     *
     * @param photo image file to set profile pic to
     * @return Status message
     * @throws Exception when user fails to authenticate
     */
    @PostMapping("/photo/save")
    public ResponseEntity<String> setPhoto(@RequestParam("image") MultipartFile photo)  throws Exception {

        // Validate file
        if (photo.isEmpty()) {
            throw new Exception();
        }

        // Save the file on the server
        try {
            // Construct the full path to the upload directory
            String fullPath = System.getProperty("user.dir") + File.separator + uploadDirectory;
            String filePath = fullPath + File.separator + photo.getOriginalFilename();
            File dest = new File(filePath);

            // Create the directory if it doesn't exist
            dest.getParentFile().mkdirs();

            photo.transferTo(dest);

            ProfileDTO userProfile = profileService.getProfile().getDTO();
            userProfile.setPhoto(photo.getOriginalFilename());

            profileService.updateProfile(userProfile);

            return ResponseEntity.ok("File uploaded successfully!");
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return ResponseEntity.status(500).body("Failed to upload the file");
        }
    }

    /**
     * Provides the frontend with a users conversations
     *
     * @param matchIds List of matchIds for user's matches
     * @return List of conversations, which are lists of messages
     */
    @PostMapping("/message")
    public List<List<MessageDTO>> getMessages(@RequestBody List<Integer> matchIds) {
        List<List<MessageDTO>> messages = new ArrayList<>();
        for (int matchId : matchIds) {
            messages.add(messageService.getMessages(matchId));
        }
        messages.sort(Comparator.comparing(l -> l.get(0).getDate()));
        return messages;
    }

    /**
     * Records sent message from frontend
     *
     * @param messageDTO Data Transfer Object of message to be sent
     */
    @PostMapping("/message/send")
    public void sendMessage(@RequestBody MessageDTO messageDTO) {
        messageService.sendMessage(messageDTO);
    }

    /**
     * Provides frontend with profile info of matches and matchIds
     *
     * @return a list of Match Data Transfer Objects containing matchId and profile info
     */
    @GetMapping("/matches")
    public List<MatchDTO> getMatchHashes() {
        String username = "";
        Authentication auth = SecurityContextHolder
                .getContext()
                .getAuthentication();
        if (auth != null && auth.isAuthenticated()) {
            username = auth.getName();
        }
        TestUser user = userRepository.findByUsername(username);
        List<MatchDTO> matchDTOList = new ArrayList<>();
        for (TestUser match : user.getMatches()) {
            int matchHash = TestMessage.matchHash(user.getId(), match.getId());
            TestProfile matchProfile = match.getProfile();
            MatchDTO matchDTO = new MatchDTO(matchHash,
                    matchProfile.getFirstName(),
                    matchProfile.getLastName(),
                    matchProfile.getPronouns(),
                    matchProfile.getPhoto());
            matchDTOList.add(matchDTO);
        }
        return matchDTOList;
    }

    /**
     * Function for integration testing
     *
     * @return Map of String with message
     */
    @GetMapping(value = "/test", produces = "application/json")
    public Map<String, String> test() {
        Map<String, String> response = new HashMap<>();
        response.put("message", "Test succeeded!");
        return response;
    }

    // TODO: Remove
    @PostMapping(value = "/image/save")
    public Boolean setImage(@RequestBody String body) {
        return true;
    }

    SecurityContextLogoutHandler logoutHandler = new SecurityContextLogoutHandler();

}
