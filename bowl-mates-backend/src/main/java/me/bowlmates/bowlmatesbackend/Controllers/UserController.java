package me.bowlmates.bowlmatesbackend.Controllers;

import jakarta.servlet.http.HttpServletRequest;
import me.bowlmates.bowlmatesbackend.Models.*;

import me.bowlmates.bowlmatesbackend.Repositories.AvailRepo;
import me.bowlmates.bowlmatesbackend.Repositories.RestRepo;
import me.bowlmates.bowlmatesbackend.Services.RestaurantService;
import me.bowlmates.bowlmatesbackend.Repositories.UserRepo;
import org.springframework.beans.factory.annotation.Autowired;

import org.springframework.http.ResponseEntity;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.annotation.AuthenticationPrincipal;

import org.springframework.security.core.Authentication;

import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler;
import org.springframework.web.bind.annotation.*;

import java.util.*;


@RestController // This means that this class is a Controller
@RequestMapping(path="/user") // This means URL's start with /demo (after Application path)
//@CrossOrigin("*")
public class UserController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepo userRepository;
    @Autowired
    private RestRepo restaurantRepository;
    @Autowired
    private AvailRepo availabilityRepository;
    @Autowired
    private RestaurantService restaurantService;

    @GetMapping(value = "/", produces = "application/json")
    public Map<String, String> user() {
        Map<String, String> response = new HashMap<>();
        response.put("message", "user level");
        return response;
    }

    @PostMapping("/pref")
    public void addRestPreference(@RequestBody List<RestaurantDTO> body) {
        restaurantService.addPreference(body);
    }

    @GetMapping(value = "/displaypref", produces = "application/json")
    public Set<RestaurantDTO> displayRestPreference() {
        String username = "";
        Authentication auth = SecurityContextHolder
                .getContext()
                .getAuthentication();
        if(auth != null && auth.isAuthenticated()){
            username = auth.getName();
        }
        TestUser user = userRepository.findByUsername(username);
        Set<RestaurantDTO> names = new HashSet<>();
        Set<TestRestaurant> rests = user.getFavoriteRestaurants();
        for (TestRestaurant rest : rests) {
            names.add(new RestaurantDTO(rest));
        }
        return names;
    }

    @GetMapping(value = "/displayrests", produces = "application/json")
    public Set<RestaurantDTO> displayAllRestaurants() {
        List<TestRestaurant> allRests = restaurantRepository.findAll();
        Set<RestaurantDTO> setRests = new HashSet<>();
        for(TestRestaurant restaurant : allRests){
            setRests.add(new RestaurantDTO(restaurant));
        }
        return setRests;
    }

    @GetMapping(value = "/availability", produces = "application/json")
    public List<AvailabilityDTO> getAvailability() {
        String username = "";
        Authentication auth = SecurityContextHolder
                .getContext()
                .getAuthentication();
        if (auth != null && auth.isAuthenticated()) {
            username = auth.getName();
        }
        TestUser user = userRepository.findByUsername(username);
        Set<TestAvailability> availabilities = user.getAvailability();
        List<AvailabilityDTO> aDTO = new ArrayList<>();
        for (TestAvailability avail : availabilities) {
            aDTO.add(new AvailabilityDTO(avail.getDay(), avail.getHour()));
        }
        return aDTO;
    }

    @PostMapping("/availability/save")
    public Boolean setAvailability(@RequestBody List<AvailabilityDTO> availabilityDTOList) {
        String username = "";
        Authentication auth = SecurityContextHolder
                .getContext()
                .getAuthentication();
        if (auth != null && auth.isAuthenticated()) {
            username = auth.getName();
        }
        TestUser user = userRepository.findByUsername(username);
        Set<TestAvailability> avails = new HashSet<>();
        for (AvailabilityDTO avail : availabilityDTOList) {
            int hash = TestAvailability
                    .calculateHash(avail.getDay(),
                            avail.getTime(),
                            TestAvailability.getNumTimes());
            TestAvailability tAvail = availabilityRepository.findByHash(hash);
            if (tAvail == null) {
                tAvail = new TestAvailability();
                tAvail.setDay(avail.getDay());
                tAvail.setHour(avail.getTime());
            }
            tAvail.addUser(user);
            availabilityRepository.save(tAvail);
            avails.add(tAvail);
        }
        user.setAvailability(avails);
        // bad style, fix later
        return true;
    }

    @GetMapping(value = "/userinfo", produces = "application/json")
    public TestUser sendUserInfo() {
        String username = "";
        Authentication auth = SecurityContextHolder
                .getContext()
                .getAuthentication();
        if (auth != null && auth.isAuthenticated()) {
            username = auth.getName();
        }
        TestUser user = userRepository.findByUsername(username);
        return user;
    }

    // TODO: userinfo post mapping

    @GetMapping(value = "/test", produces = "application/json")
    public Map<String, String> test() {
        Map<String, String> response = new HashMap<>();
        response.put("message", "Test succeeded!");
        return response;
    }

    SecurityContextLogoutHandler logoutHandler = new SecurityContextLogoutHandler();

}
