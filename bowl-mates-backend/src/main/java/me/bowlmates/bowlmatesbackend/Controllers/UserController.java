package me.bowlmates.bowlmatesbackend.Controllers;

import jakarta.servlet.http.HttpServletRequest;
import me.bowlmates.bowlmatesbackend.Models.UserRequestDTO;

import me.bowlmates.bowlmatesbackend.Models.RestaurantDTO;
import me.bowlmates.bowlmatesbackend.Models.TestRestaurant;

import me.bowlmates.bowlmatesbackend.Repositories.RestRepo;
import me.bowlmates.bowlmatesbackend.Models.TestUser;
import me.bowlmates.bowlmatesbackend.Services.RestaurantService;
import me.bowlmates.bowlmatesbackend.Repositories.UserRepo;
import org.springframework.beans.factory.annotation.Autowired;

import org.springframework.http.ResponseEntity;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.annotation.AuthenticationPrincipal;

import org.springframework.security.core.Authentication;

import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler;
import org.springframework.web.bind.annotation.*;

import java.util.*;


@RestController // This means that this class is a Controller
@RequestMapping(path="/user") // This means URL's start with /demo (after Application path)
@CrossOrigin("*")
public class UserController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepo userRepository;
    @Autowired
    private RestRepo restaurantRepository;
    @Autowired
    private RestaurantService restaurantService;

    @GetMapping("/")
    public String testUser() {
        return "User level";
    }

    @GetMapping(value = "/", produces = "application/json")
    public Map<String, String> user() {
        Map<String, String> response = new HashMap<>();
        response.put("message", "user level");
        return response;
    }

    @PostMapping("/pref")
    public void addRestPreference(@RequestBody List<RestaurantDTO> body) {
        restaurantService.addPreference(body);
    }

    @GetMapping(value = "/displaypref", produces = "application/json")
    public Set<RestaurantDTO> displayRestPreference() {
        String username = "";
        Authentication auth = SecurityContextHolder.getContext().getAuthentication();
        if(auth != null && auth.isAuthenticated()){
            username = auth.getName();
        }
        TestUser user = userRepository.findByUsername(username);
        Set<RestaurantDTO> names = new HashSet<>();
        Set<TestRestaurant> rests = user.getFavoriteRestaurants();
        for (TestRestaurant rest : rests) {
            names.add(new RestaurantDTO(rest));
        }
        return names;
    }

    @GetMapping(value = "/displayrests", produces = "application/json")
    public Set<RestaurantDTO> displayAllRestaurants(){
        List<TestRestaurant> allRests = restaurantRepository.findAll();
        Set<RestaurantDTO> setRests = new HashSet<>();
        for(TestRestaurant restaurant : allRests){
            setRests.add(new RestaurantDTO(restaurant));
        }

        return setRests;
    }

//    @GetMapping(value = "/availability", produces = "application/json")
//    public boolean[] getAvailability() {
//        String username = "";
//        Authentication auth = SecurityContextHolder.getContext().getAuthentication();
//        if (auth != null && auth.isAuthenticated()) {
//            username = auth.getName();
//        }
//        TestUser user = userRepository.findByUsername(username);
//        return user.getAvailability();
//    }
//
//    @PostMapping("/availability/save")
//    public Boolean setAvailability(@RequestBody boolean[] avail) {
//        String username = "";
//        Authentication auth = SecurityContextHolder.getContext().getAuthentication();
//        if (auth != null && auth.isAuthenticated()) {
//            username = auth.getName();
//        }
//        TestUser user = userRepository.findByUsername(username);
//        user.setAvailability(avail);
//        return true;
//    }

    @GetMapping(value = "/userinfo", produces = "application/json")
    public TestUser sendUserInfo() {
        String username = "";
        Authentication auth = SecurityContextHolder.getContext().getAuthentication();
        if (auth != null && auth.isAuthenticated()) {
            username = auth.getName();
        }
        TestUser user = userRepository.findByUsername(username);
        return user;
    }

    // TODO: userinfo post mapping

//    @GetMapping("/token")
//    public String tokenTest(@RequestHeader HttpServletRequest request) {
//        String authenticationHeader = request.getHeader("Authorization");
//        if (authenticationHeader == null || !authenticationHeader.startsWith("Bearer ")) {
//            throw new IllegalArgumentException();
//        }
//        return tokenService.getUsernameFromToken(authenticationHeader);
//    }

    @GetMapping(value = "/test", produces = "application/json")
    public Map<String, String> test() {
        Map<String, String> response = new HashMap<>();
        response.put("message", "Test succeeded!");
        return response;
    }

    SecurityContextLogoutHandler logoutHandler = new SecurityContextLogoutHandler();

}
