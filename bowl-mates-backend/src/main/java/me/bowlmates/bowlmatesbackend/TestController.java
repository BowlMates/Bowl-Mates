package me.bowlmates.bowlmatesbackend;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.jaas.SecurityContextLoginModule;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import org.springframework.ui.Model;

import org.springframework.validation.BindingResult;


@Controller // This means that this class is a Controller
//@RequestMapping(path="/demo") // This means URL's start with /demo (after Application path)
public class TestController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepo userRepository;
    @Autowired
    private RestRepo restaurantRepository;


    @GetMapping("/register")
    public String showRegistrationForm(Model model){
        // create model object to store form data
        TestUser user = new TestUser();
        model.addAttribute("user", user);
        System.out.println("Register made it this far!");
        return "register";
    }

    @GetMapping("/restaurant")
    public String showRestaurantForm(Model model){
        // create model object to store form data
        TestRestaurant rest = new TestRestaurant();
        model.addAttribute("rest", rest);
        return "restaurant";
    }

    @CrossOrigin("http://localhost:3000")
    @GetMapping(value = "/")
    public String showLanding(Model model){
        String username = "";
        Authentication auth = SecurityContextHolder.getContext().getAuthentication();
        if(auth != null && auth.isAuthenticated()){
            username = auth.getName();
        }
        TestUser user = userRepository.findByUsername(username);
        model.addAttribute("user", user);

        return "/landing";
    }

    @PostMapping("/register/save")
    public String registration( @ModelAttribute("user") TestUser userDto,
                                BindingResult result,
                                Model model){
        System.out.println("Register save");
        TestUser existingUser = userRepository.findByEmail(userDto.getEmail());

        if(existingUser != null && existingUser.getEmail() != null && !existingUser.getEmail().isEmpty()){
            System.out.println("error 1");
            result.rejectValue("email", null,
                    "There is already an account registered with the same email");
        }

        if(result.hasErrors()){
            System.out.println("error 2");
            model.addAttribute("user", userDto);
            return "/register";
        }

        userRepository.save(userDto);
        System.out.println("Register success!");
        return "redirect:/register?success";
    }

    @PostMapping("/restaurant/save")
    public String restaurant_info( @ModelAttribute("rest") TestRestaurant restData,
                                   BindingResult result,
                                   Model model){
        TestRestaurant existingTestRestaurant = restaurantRepository.findByAddress(restData.getAddress());

        if(existingTestRestaurant != null && existingTestRestaurant.getAddress() != null && !existingTestRestaurant.getAddress().isEmpty()){
            result.rejectValue("address", null,
                    "Your restaurant is already registered with BowlMates!");
        }

        if(result.hasErrors()){
            model.addAttribute("rest", restData);
            return "/restaurant";
        }

        restaurantRepository.save(restData);
        return "redirect:/restaurant?success";
    }

    @CrossOrigin(origins = "http://localhost:3000")
    @PostMapping(path = "/testRegister", produces="Application/json")
    public @ResponseBody TestUser testRegister(@RequestParam("username") String username, @ModelAttribute("user") TestUser testUser) {

        testUser.setName(username);
        testUser.setEmail(username + "@mail.com");
        testUser.setUsername(username);
        testUser.setPassword("Geoff");

        TestUser existingUser = userRepository.findByEmail(testUser.getEmail());

        if(existingUser != null && existingUser.getEmail() != null && !existingUser.getEmail().isEmpty()){
            System.out.println("Dup user");
            return testUser;
        }

        userRepository.save(testUser);
        System.out.println("User added");
        return testUser;
    }

    @CrossOrigin(origins = "http://localhost:3000")
    @GetMapping(path = "/test", produces="Application/json")
    public @ResponseBody TestUser testApi() {

        TestUser u1 = new TestUser();
        u1.setName("u1");
        u1.setId(1);
        u1.setEmail("u1@mail.com");
        return u1;
    }

    @CrossOrigin(origins = "http://localhost:3000")
    @GetMapping(path="/all", produces="Application/json")
    public @ResponseBody Iterable<TestUser> getAllUsers() {
        // This returns a JSON or XML with the users
        return userRepository.findAll();
    }

    SecurityContextLogoutHandler logoutHandler = new SecurityContextLogoutHandler();

}
