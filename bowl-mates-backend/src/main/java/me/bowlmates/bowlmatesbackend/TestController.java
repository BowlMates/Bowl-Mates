package me.bowlmates.bowlmatesbackend;

import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.Authentication;
import org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.ui.Model;

import org.springframework.validation.BindingResult;

import org.springframework.web.bind.annotation.ModelAttribute;



@Controller // This means that this class is a Controller
//@RequestMapping(path="/demo") // This means URL's start with /demo (after Application path)
public class TestController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepo userRepository;

    @GetMapping("/register")
    public String showRegistrationForm(Model model){
        // create model object to store form data
        TestUser user = new TestUser();
        model.addAttribute("user", user);
        return "register";
    }

    @PostMapping("/register/save")
    public String registration( @ModelAttribute("user") TestUser userDto,
                               BindingResult result,
                               Model model){
        TestUser existingUser = userRepository.findByEmail(userDto.getEmail());

        if(existingUser != null && existingUser.getEmail() != null && !existingUser.getEmail().isEmpty()){
            result.rejectValue("email", null,
                    "There is already an account registered with the same email");
        }

        if(result.hasErrors()){
            model.addAttribute("user", userDto);
            return "/register";
        }

        userRepository.save(userDto);
        return "redirect:/register?success";
    }

    @GetMapping(path="/all")
    public @ResponseBody Iterable<TestUser> getAllUsers() {
        // This returns a JSON or XML with the users
        return userRepository.findAll();
    }

    @GetMapping(path="/")
    public @ResponseBody Iterable<TestUser> getAllUSers() {
        return userRepository.findAll();
    }

    SecurityContextLogoutHandler logoutHandler = new SecurityContextLogoutHandler();

}
